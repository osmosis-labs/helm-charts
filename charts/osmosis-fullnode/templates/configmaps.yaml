apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "osmosis-fullnode.fullname" . }}-config
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "osmosis-fullnode.labels" . | nindent 4 }}
data:
  config.toml: |
    {{- .Values.config.osmosis.config | nindent 4 }}
  app.toml: |
    {{- .Values.config.osmosis.app | nindent 4 }}
  client.toml: |
    {{- .Values.config.osmosis.client | nindent 4 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "osmosis-fullnode.fullname" . }}-scripts
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "osmosis-fullnode.labels" . | nindent 4 }}
data:
  startup.sh: |
    #!/bin/sh
    ls -lart $OSMOSIS_HOME/
    if [ "$FORCE_RESET" = "true" ]; then
      echo "üóëÔ∏è Force reset requested, cleaning data directory"
      rm -rf $OSMOSIS_HOME/*
    fi
    # Check if data directory exists and is not empty
    if [ -d "$OSMOSIS_HOME/data" ]; then
      echo "üîç Existing data directory found, skipping initialization"
    else
      echo "üì¶ No existing data found, performing full initialization"
      echo "üóëÔ∏è Cleaning data directory"
      rm -rf $OSMOSIS_HOME/*
      apk add --quiet --no-cache \
        lz4 \
        lz4-dev \
        curl \
        wget \
        tar \
        dasel \
        jq
      # Setup cosmovisor directories
      rm -rf $DAEMON_HOME/cosmovisor/upgrades/*
      mkdir -p $DAEMON_HOME/cosmovisor/genesis/bin
      mkdir -p $DAEMON_HOME/cosmovisor/upgrades
      echo "üß™ Initializing node"
      osmosisd init $MONIKER > /dev/null 2>&1
      echo üí•  Downloading Genesis from $GENESIS_URL
      wget -q -L $GENESIS_URL -O $OSMOSIS_HOME/config/genesis.json
      echo üóÉ  Downloading Addrbook from $ADDRBOOK_URL
      wget -q -L $ADDRBOOK_URL -O $OSMOSIS_HOME/config/addrbook.json
      if [ "$STATE_SYNC" = "true" ]; then
        source /etc/osmosis/scripts/state_sync.sh
      else
        source /etc/osmosis/scripts/download_snapshot.sh
      fi
    fi
    # Copy the osmosisd binary to cosmovisor's genesis bin directory
    cp $(which osmosisd) $DAEMON_HOME/cosmovisor/genesis/bin/
    source /etc/osmosis/scripts/replace_config.sh
    source /etc/osmosis/scripts/copy_node_key.sh
    echo "üö¶ Starting node with cosmovisor"
    cosmovisor run start --reject-config-defaults
  
  state_sync.sh: |
    echo "üîÑ Setting up state sync"
    RPC_URL="https://rpc.osmosis.zone"
    RPC_SERVERS="http://49.12.126.214:26657,https://rpc.archive.osmosis.zone:443"
    LATEST_HEIGHT=$(curl -s $RPC_URL/block | jq -r .result.block.header.height)
    BLOCK_HEIGHT=$((LATEST_HEIGHT - 200))
    PEERS=c1023ca3f1f17f69fb01146e6b10f686a838d678@178.63.130.196:26656,b4c2b79da2f5b3f7a35ff57232158c7b9a7a8647@49.12.126.214:26656
    TRUST_HASH=$(curl -s "$RPC_URL/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)
    # Update config.toml with state sync settings
    dasel put bool -f "$OSMOSIS_HOME/config/config.toml" -s "statesync.enable" -v true
    dasel put int -f "$OSMOSIS_HOME/config/config.toml" -s "statesync.trust_height" -v "$BLOCK_HEIGHT"
    dasel put string -f "$OSMOSIS_HOME/config/config.toml" -s "statesync.trust_hash" -v "$TRUST_HASH"
    dasel put string -f "$OSMOSIS_HOME/config/config.toml" -s "statesync.rpc_servers" -v "$RPC_SERVERS"
    dasel put string -f "$OSMOSIS_HOME/config/config.toml" -s "p2p.persistent_peers" -v "$PEERS"
  
  download_snapshot.sh: |
    echo "üì∑ Snapshot from $SNAPSHOT_URL"
    if [[ "$SNAPSHOT_URL" == *".tar.lz4" ]]; then
      echo "üì∑ Using provided snapshot from $SNAPSHOT_URL"
      # Verify the URL is accessible
      if curl --output /dev/null --silent --head --fail "$SNAPSHOT_URL"; then
        DOWNLOAD_URL="$SNAPSHOT_URL"
      else
        echo "‚ö†Ô∏è Provided snapshot URL is not accessible, falling back to appropriate snapshots endpoint"
        if [[ "$SNAPSHOT_URL" == *"testnet"* ]]; then
          DOWNLOAD_URL=$(curl -sL https://snapshots.testnet.osmosis.zone/latest)
        else
          DOWNLOAD_URL=$(curl -sL https://snapshots.osmosis.zone/latest)
        fi
      fi
    else
      echo "üì∑ Fetching latest snapshot URL from snapshots endpoint"
      # Check if this is a testnet environment by examining the SNAPSHOT_URL
      if [[ "$SNAPSHOT_URL" == *"testnet"* ]]; then
        echo "üì∑ Detected testnet environment, using testnet snapshots"
        DOWNLOAD_URL=$(curl -sL https://snapshots.testnet.osmosis.zone/latest)
      else
        echo "üì∑ Using mainnet snapshots"
        DOWNLOAD_URL=$(curl -sL https://snapshots.osmosis.zone/latest)
      fi
    fi
    echo "üì∑ Using snapshot from $DOWNLOAD_URL"
    start_time=$(date +%s)
    wget -q -O - $DOWNLOAD_URL | lz4 -d | tar -C $OSMOSIS_HOME/ -xf -
    end_time=$(date +%s)
    elapsed_time=$((end_time - start_time))
    echo "Download and extraction took ${elapsed_time} seconds"
  
  replace_config.sh: |
    #!/bin/sh 
    echo "üéõ Replacing node configuration"
    cp /etc/osmosis/config/config.toml $OSMOSIS_HOME/config/
    cp /etc/osmosis/config/app.toml $OSMOSIS_HOME/config/
    cp /etc/osmosis/config/client.toml $OSMOSIS_HOME/config/
  
  copy_node_key.sh: |
    #!/bin/sh
    echo "üîë Copying node key files if present"
    {{- if .Values.seedNode.enabled }}
    echo "üå± Seed node mode enabled, checking for seed node keys"
    # Copy seed node keys if available
    if [ -e {{ .Values.seedNode.secret.mountPath }}/node_key.json ]; then
      echo "üîë Copying seed node key"
      cp {{ .Values.seedNode.secret.mountPath }}/node_key.json $OSMOSIS_HOME/config/node_key.json
    fi
    if [ -e {{ .Values.seedNode.secret.mountPath }}/priv_validator_key.json ]; then
      echo "üîë Copying seed node validator key"
      cp {{ .Values.seedNode.secret.mountPath }}/priv_validator_key.json $OSMOSIS_HOME/config/priv_validator_key.json
    fi
    {{- else }}
    # Regular node key copy logic
    if [ -e /etc/osmosis/node_keys/node_key.json ]; then
      cp /etc/osmosis/node_keys/node_key.json $OSMOSIS_HOME/config/node_key.json
    fi
    if [ -e /etc/osmosis/node_keys/priv_validator_key.json ]; then
      cp /etc/osmosis/node_keys/priv_validator_key.json $OSMOSIS_HOME/config/priv_validator_key.json
    fi
    {{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "osmosis-fullnode.fullname" . }}-sentinel-config
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "osmosis-fullnode.labels" . | nindent 4 }}
data:
  max-dir-size-gb: "{{ .Values.sentinel.config.maxDirSizeGb }}"
  monitor-path: "{{ .Values.sentinel.config.monitorPath }}"
  argocd-app: "{{ .Values.sentinel.config.argocdApp }}"
  max-node-restart-count: "{{ .Values.sentinel.config.maxNodeRestartCount }}"
  argocd-enabled: "{{ .Values.sentinel.config.argocdEnabled }}"
  argocd-server: "{{ .Values.sentinel.config.argocdServer | default "argocd-server.argocd.svc.cluster.local:80" }}" 
